<!DOCTYPE html>
<html><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="font-awesome-4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="css/spruits-2018.9.css">

<style id="spruits-app-styles">
body {margin:0;padding:1em;background:#ffffb0;}
</style>
<title>RadioGroup</title>
<script src="js/jquery-3.1.1.min.js"></script>
<script src="js/spruits2.js"></script>
<script>
"use strict"
$(document).ready(function(){

const Component = spruits2.Component;

const testcases = [];

//****************************************************************************************************************************************************************************
const gender = new Component({ fieldName:"Gender" });

gender.$field.append(
  $("<div>").append(
    $("<span>", { class:"rb-label" }).html("Male"),
    $("<input>", { type:"radio", name:"Gender", value:"Male"   })),
  $("<div>").append(
    $("<span>", { class:"rb-label" }).html("Female"),
    $("<input>", { type:"radio", name:"Gender", value:"Female"   })),
  $("<div>").append(
    $("<span>", { class:"rb-label" }).html("Other"),
    $("<input>", { type:"radio", name:"Gender", value:"Other"   }))
);

$("#spruits-app-styles").append(
    ".rb-label, .spruit-field > .rb-label {",
       "display:inline-block;",
       "padding-left:1em;",
       "width:5em;",
  "}"
);
gender.$field.children("div").children("span").addClass("rb-label");

testcases.push(gender, { $field:$("<div>", { style:"height:1em" }) });

//****************************************************************************************************************************************************************************
let gender2, radios = [], buttonName, groupName="Gender2";

function getRadioButtonArgs(buttonName) {
  return { fieldName:buttonName, attrs:{ span:{ style:"display:block" }, label:{ class:"rb-label" } } };
}
function getRadioButtonInput(groupName, buttonName) {
  return $("<input>", { type:"radio", name:groupName, value:buttonName, style:"margin-left:5px" });
}

buttonName = "Male";
radios.push(new Component(getRadioButtonArgs(buttonName)));
radios[0].$field.append(getRadioButtonInput(groupName, buttonName));

buttonName = "Female";
radios.push(new Component(getRadioButtonArgs(buttonName)));
radios[1].$field.append(getRadioButtonInput(groupName, buttonName));

buttonName = "Other";
radios.push(new Component(getRadioButtonArgs(buttonName)));
radios[2].$field.append(getRadioButtonInput(groupName, buttonName));

gender2 = new Component({ fieldName:"Gender" });
gender2.$field.append(radios.map(comp => comp.$field));

testcases.push(gender2, { $field:$("<div>", { style:"height:1em" }) });

//****************************************************************************************************************************************************************************
let gender3, radios3 = [];

$("#spruits-app-styles").append(
  /* The radiobutton
  '.radiobutton {',
  'display: block;',
  'cursor: pointer;',
  '}',
  */
  
  /* Hide the browser default radio button */
  '.radiobutton input {',
  'opacity: 0;',
  'cursor: pointer;',
  '}',

  /* Create a custom radio button */
  '.rb-checkmark {',
  'height: 1em;',
  'width: 1em;',
  'background-color: #ffff00;',
  'display:inline-block;',
  'border-radius: 50%;',
  'border-bottom:1px solid #999900;',
  'border-right:1px solid #999900;',
  'margin-left:-1em;',
  '}',

  /* On mouse-over, add a dark background color */
  '.radiobutton:hover input ~ .rb-checkmark {',
  'background-color: #999900;',
  '}',

  /* Create the indicator (the dot/circle - hidden when not checked) */
  '.rb-checkmark:after {',
  'content: "";',
  'display: inline-block;',
  'background-color:#FFFF00;',
  '}',

  /* Show the indicator (dot/circle) when checked */
  '.radiobutton input:checked ~ .rb-checkmark:after {',
  'display: inline-block;',
  'background-color:#333300;',  
  '}',

  /* Style the indicator (dot/circle) */
  '.radiobutton .rb-checkmark:after {',
  'width: 0.5em;',
  'height: 0.5em;',
  'border-radius: 50%;',
  'margin-left:0.25em;',
  'margin-bottom:0.125em;',
  '}'
);

groupName = "Gender3";
function handleClickCheckbox(e) {
  let $input = $(this).prev();
  
  e.preventDefault();
  $input[0].checked = $input[0].checked ? false : true;
};

buttonName = "Male";
radios3.push(new Component(getRadioButtonArgs(buttonName)));
radios3[0].$field.append(getRadioButtonInput(groupName, buttonName));

buttonName = "Female";
radios3.push(new Component(getRadioButtonArgs(buttonName)));
radios3[1].$field.append(getRadioButtonInput(groupName, buttonName));

buttonName = "Other";
radios3.push(new Component(getRadioButtonArgs(buttonName)));
radios3[2].$field.append(getRadioButtonInput(groupName, buttonName));

gender3 = new Component({ fieldName:"Gender" });
gender3.$field.append(radios3.map(comp => comp.$field));

gender3.$field.children(".spruit-field")
  .addClass("radiobutton")
  .append( $("<span>", { class:"rb-checkmark" }).on("click", handleClickCheckbox) );
gender3.$field.children(".spruit-field").children("input").css("margin", "0");

testcases.push(gender3);

//****************************************************************************************************************************************************************************
// (attrs && attrs.radioButton && attrs.radioButton.input) ? attrs.radioButton.input.name : args.fieldName ->
//   getAttr(attrs, args.fieldName, "radioButton", "input", "name")
function getAttr(attrs, defVal) {
  let val, attr = [].slice.call(arguments[2]), len = attr.len, i;
  
  for (i=0; i<len; i++) {
    val = attrs[attr[i]];
    if (val === undefined) break;
  }
  return val;
}

function RadioGroup(args) {
  let
  buttonNames = args.buttonNames,
  custom = args.custom,
  groupName,
  RadioButton;

  RadioButton = function(args) {
    let
    $input,
    handleClickCheckbox;

    handleClickCheckbox = function(e) {
      e.preventDefault();
      $input[0].checked = $input[0].checked ? false : true;
    };
    
    Component.call(this, args);
    $input = $("<input>", { type:"radio", name:groupName, value:this.name, style:"margin-left:5px" });
    this.$field.append($input);
    if (custom !== false) {
      this.$field
	.addClass("radiobutton")
	.append( $("<span>", { class:"rb-checkmark" }).on("click", handleClickCheckbox) );
    }
    $input.css("margin", "0");
  };

  Component.call(this, args);
  groupName = this.name;
  radios = buttonsNames.map(buttonName => new RadioButton({ fieldName:buttonName, attrs:{ span:{ style:"display:block" }, label:{ class:"rb-label" } }}) );
}

//****************************************************************************************************************************************************************************
testcases.push({ $field:$("<div>").append("getAttr 1: radioButton.input.name=color:green").css(
  getAttr({ radioButton:{ input:{ name:{ color:"green" }}} }, "color:red", "radioButton", "input", "name")
)});

//****************************************************************************************************************************************************************************
$("body").append(
  "<h4>RadioGroup</h4>", testcases.map(testcase => testcase.$field)
);


}); //document.ready
</script>
</head>
<body>
</body>
</html>
