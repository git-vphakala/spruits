<!DOCTYPE html>
<html><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="font-awesome-4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="css/spruits-2018.9.css">
<style id="spruits-app-styles">
</style>
<title>doc</title>
<script src="js/jquery-3.1.1.min.js"></script>
<script src="js/spruits2.js"></script>
<script>
"use strict"
$(document).ready(function(){

let pm, screens ={}, pageName, menubar, dropdown, createPageLink, createDocPage, comps = {}, handleClickVal, fullSrc;

createPageLink = function(pageName, linkText) {
  let handleClickLink;

  handleClickLink = function(e, pageName) {
    e.preventDefault();
    // console.log("link to page " + pageName);
    pm.set("goto-page", pageName);
  };
  
  return $("<a>").attr("href","javascript:;").on("click", e => handleClickLink(e, pageName)).html(linkText ? linkText : pageName);
};

createDocPage = function(pageName, $page) {
  return {
    create: function(entity) {
      entity.createField(pageName, spruits2.Component, { insertLabel:false, $field:$("<span>").append($page) });
      entity.insertFields();
    }, // create
  }; // screens
};

//****************************************************************************************************************************************************************************
fullSrc = new spruits2.Modal({ fieldName:"Full Source", $modalbody:$("<p>").css("padding", "1em").html("Insert code here"), $container:$("body") });

function handleClickFullSource(e, src, title) {
  let $pre = $("<pre>").css({ "padding-left":"1em" }), $code = $("<code>").append( $pre ), htmlTemplate =
`
&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
&lt;link rel="stylesheet" href="font-awesome-4.7.0/css/font-awesome.min.css"&gt;
&lt;link rel="stylesheet" href="css/spruits-2018.9.css"&gt;
&lt;style id="spruits-app-styles"&gt;
&lt;/style&gt;
&lt;title&gt;${title?title:"Full Source"}&lt;/title&gt;
&lt;script src="js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;
&lt;script src="js/spruits2.js"&gt;&lt;/script&gt;
&lt;script&gt;
"use strict"
$(document).ready(function(){

${src.reduce((all, line) => { line = line.replace(/</g, "&lt;") + "\n"; return all + line; }, "")}
}); //document.ready
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
`; // ${title}, ${src} are replaced

  e.preventDefault();
  
  fullSrc.set("$modalbody", $pre.append(htmlTemplate));
  fullSrc.set("show");
}

//****************************************************************************************************************************************************************************
menubar = [ "File" ];
dropdown = {
  "File":[ { text:"Table of contents", dropdown:true } ],

  "Table of contents":[ 
    "Introduction",
    {text:"Screen JS", dropdown:true},
    {text:"Dev Env", dropdown:true},
    {text:"Test Env", dropdown:true}
  ],

  "Screen JS":[
    {text:"Core components", dropdown:true} ,
    {text:"Content Management", dropdown:true},
    "Data Type widgets"
  ],
  
  "Core components":[
    "Component",
    "Container",
  ],

  "Content Management":[
    "Entity",
    "PageManager",
    "TouchManager",
    "ResizeAgent",
    "Modal",
  ],
  
  "Data Type widgets":[
    "Crud",
    "AlphaNumericString",
    "DigitString",
    "DecimalDigitString",
    "InputCheckbox",
    "InputTime",
    "InputDate",
    "InputDateAndTime"
  ],
  
  "Dev Env":[
  ],
  "Test Env":[
  ],
};

//****************************************************************************************************************************************************************************
pageName = "Introduction";
screens[pageName] = createDocPage(pageName, [
  $("<h4>").html("Spruits Documentation"),
  $("<p>").html("Spruits are <b>S</b>im<b>P</b>le<b>R UI T</b>ool<b>S</b>."), // simpler ui tools => SimPleR UI ToolS
  $("<div>").append(
    "They contain",
    $("<ul>").append(
      $("<li>").append(createPageLink("Screen JS", "jslib"), " to create UIs"),
      $("<li>").html("Nodejs based dev environment"),
      $("<li>").html("Spruitster to test the UIs")
    ))
]);

//****************************************************************************************************************************************************************************
pageName = "Screen JS";
screens[pageName] = createDocPage(pageName, [
  $("<p>").append(
    "Spruits Screen JS is mobile first, component based, responsive SPA UI built on Jquery."
  ),
  $("<p>").append(
    "The core components are",
    $("<ul>").append( dropdown["Core components"].map(compName => $("<li>").append(createPageLink(compName))) )
  ),
  $("<p>").append(
    "Content management components",
    $("<ul>").append( dropdown["Content Management"].map(compName => $("<li>").append(createPageLink(compName))) )
  ),
  $("<p>").append(
    "Data Type widgets",
    $("<ul>").append( dropdown["Data Type widgets"].map(compName => $("<li>").append(createPageLink(compName))) )
  )
]);

//****************************************************************************************************************************************************************************
pageName = "Component";
comps["1"] = new spruits2.Component({});
comps["1.hw"] = () => {
  let hw = new spruits2.Component({ fieldName:"Hello World" });
  $("body").append(hw.$field);
};
comps["2"] = new spruits2.Component({ $field:"Hello World!!!" });
comps["2.$input"] = new spruits2.Component({ $field:$("<input>", { type:"radio" }) });
comps["3"] = new spruits2.Component({ $field:$("<div>") });
comps["4"] = new spruits2.Component({ fieldName:"Gender" });

comps["5"] = new spruits2.Component({ fieldName:"Gender" });
comps["5"].$field.append(
  $("<div>").append($("<span>").html("Male"),   $("<input>", { type:"radio", name:"Gender", value:"male"   }) ),
  $("<div>").append($("<span>").html("Female"), $("<input>", { type:"radio", name:"Gender", value:"female" }) ),
  $("<div>").append($("<span>").html("Other"),  $("<input>", { type:"radio", name:"Gender", value:"other"  }) )
);
comps["5"].$field.children("div").children("span").css({ display:"inline-block", "padding-left":"1em", width:"5em" });
comps["5.code"] = function Gender() {
  spruits2.Component.call(this, { fieldName:"Gender, v0.1" });

  this.$field.append(
    [ "Male", "Female", "Other" ].map(name => {
      return $("<div>").append(
	$("<span>").html(name),
	$("<input>", { type:"radio", name:"Gender", value:name }));
    })
  );
  
  this.$field.children("div").children("span").css(
    { display:"inline-block", "padding-left":"1em", width:"5em" }
  );
};

handleClickVal = function(e, compsNum) {
  let val;
	
  e.preventDefault();
	
  comps[compsNum].$field.find("input").each(function() {
    if ($(this).prop("checked")) val = $(this).val();
  });
  $(e.target).next().html(val);
};

//****************************************************************************************************************************************************************************
let radioGroups = [], RadioGroupImplementation = [], cssRules = [];

cssRules[0] = `.radiobutton {
  display:block;
  padding-left:1em;
}`;
RadioGroupImplementation[0] = {};
RadioGroupImplementation[0].f = function RadioGroup(args) {
  let
  buttonNames = args.buttonNames,
  
  RadioButton = function(args) {
    let groupName = args.groupName;
    
    spruits2.Component.call(this, args);
    this.$field.addClass("radiobutton").append(
      $("<input>", { type:"radio", name:groupName, value:this.name })
    );
  };

  spruits2.Component.call(this, args);

  buttonNames.map(buttonName => {
    return new RadioButton({ fieldName:buttonName, groupName:this.name });
  }).forEach(comp => { this.$field.append(comp.$field); });
};
RadioGroupImplementation[0].usage = { name:"RadioGroup", args:{
  fieldName:"Gender, v0.2",
  buttonNames:[ "Male", "Female", "Other" ],
}};
radioGroups[0] = new RadioGroupImplementation[0].f(RadioGroupImplementation[0].usage.args);

spruits2.addCssRules(cssRules[0], $("#spruits-app-styles"));

//****************************************************************************************************************************************************************************
cssRules[1] = `.radiobutton-1 {
  display:block;
  padding-left:1em;
}
.radiobutton-1 input {
  opacity:0;
}
.radiobutton-1.def input {
  opacity:unset;
}
.radiobutton-1 .custombutton {
  height:1em;
  width:1em;
  background-color:#ffff00;
  display:inline-block;
  border-radius:50%;
  border-bottom:1px solid #999900;
  border-right:1px solid #999900;
  margin-left:-1em;
}
.radiobutton-1:hover input ~ .custombutton {
  background-color:#999900;
}
.radiobutton-1 .custombutton:after {
  content:"";
  display:inline-block;
  background-color:#FFFF00;
  width:0.5em;
  height:0.5em;
  border-radius:50%;
  margin-left:0.25em;
  margin-bottom:0.125em;
}
.radiobutton-1 input:checked ~ .custombutton:after {
  display:inline-block;
  background-color:#333300;
}`;
RadioGroupImplementation[1] = {};
RadioGroupImplementation[1].f = function RadioGroup(args) {
  let buttonNames = args.buttonNames,
      custom = args.custom,
      
      RadioButton = function(args) {
	let groupName = args.groupName,
	    $customButton,

	    handleClickCheckbox = function(e) {
	      let $input = $(this).prev();
	      e.preventDefault();
	      $input[0].checked = $input[0].checked ? false : true;
	    };
    
	spruits2.Component.call(this, args);
	
	$customButton = (custom !== false) ?
	  $("<span>", { class:"custombutton" })
	  .on("click", handleClickCheckbox) : "";
	
	this.$field.addClass("radiobutton-1" + ((custom === false) ? " def" : "")).append(
	  $("<input>", { type:"radio", name:groupName, value:this.name }),
	  $customButton
	);
      };

  spruits2.Component.call(this, args);

  buttonNames.map(buttonName => {
    return new RadioButton({ fieldName:buttonName, groupName:this.name });
  }).forEach(comp => { this.$field.append(comp.$field); });
};
RadioGroupImplementation[1].usage = { name:"RadioGroup", args:{
  fieldName:"Gender, v1.0",
  buttonNames:[ "Male", "Female", "Other" ],
}};
radioGroups[1] = new RadioGroupImplementation[1].f(RadioGroupImplementation[1].usage.args);
//radioGroups[1] = new RadioGroupImplementation[1].f({ fieldName:"Gender, v1.0", buttonNames:[ "Male", "Female", "Other" ] });
spruits2.addCssRules(cssRules[1], $("#spruits-app-styles"));
//$("#spruits-app-styles").append(cssRules[1]);

//****************************************************************************************************************************************************************************
cssRules[2] = `.radiobutton-1 {
  display:block;
  padding-left:1em;
}
.radiobutton-1 input {
  opacity:0;
}
.radiobutton-1.def input {
  opacity:unset;
}
.radiobutton-1 .custombutton {
  height:1em;
  width:1em;
  background-color:#ffff00;
  display:inline-block;
  border-radius:50%;
  border-bottom:1px solid #999900;
  border-right:1px solid #999900;
  margin-left:-1em;
}
.radiobutton-1:hover input ~ .custombutton {
  background-color:#999900;
}
.radiobutton-1 .custombutton:after {
  content:"";
  display:inline-block;
  background-color:#FFFF00;
  width:0.5em;
  height:0.5em;
  border-radius:50%;
  margin-left:0.25em;
  margin-bottom:0.125em;
}
.radiobutton-1 input:checked ~ .custombutton:after {
  display:inline-block;
  background-color:#333300;
}`;
RadioGroupImplementation[2] = {};
RadioGroupImplementation[2].f = function RadioGroup(args) {
  let buttonNames = args.buttonNames,
      custom = args.custom,
      buttons,
      
      RadioButton = function(args) {
	let groupName = args.groupName,
	    $input,
	    $customButton,

	    handleClickCheckbox = function(e) {
	      // let $input = $(this).prev();
	      e.preventDefault();
	      $input[0].checked = $input[0].checked ? false : true;
	    };
    
	spruits2.Component.call(this, args);
	
	$input = $("<input>", { type:"radio", name:groupName, value:this.name });
	
	$customButton = (custom !== false) ?
	  $("<span>", { class:"custombutton" })
	  .on("click", handleClickCheckbox) : "";
	
	this.$field.addClass("radiobutton-1" + ((custom === false) ? " def" : "")).append(
	  $input,
	  $customButton
	);

	this.getVal = function getVal(propName) {
	  let val;

	  switch(propName) {
	  case "val":
	  default:
	    val = $input[0].checked ? true : false;
	    break;
	  }

	  return val;
	};
      };

  spruits2.Component.call(this, args);
  
  buttons = buttonNames.map(buttonName => {
    return new RadioButton({ fieldName:buttonName, groupName:this.name });
  });
  buttons.forEach(comp => { this.$field.append(comp.$field); });

  this.getVal = function(propName) {
    let val, len, i;
    
    switch(propName) {
    case "val":
    default:
      len = buttons.length;
      for (i=0; i<len; i++) {
	if (buttons[i].get("val")) {
	  val = buttons[i].name;
	  break;
	}
      }
      break;
    }

    return val;
  };
};
RadioGroupImplementation[2].usage = { name:"RadioGroup", args:{
  fieldName:"Gender, v1.0",
  buttonNames:[ "Male", "Female", "Other" ],
}};
radioGroups[2] = new RadioGroupImplementation[2].f(RadioGroupImplementation[1].usage.args);
// spruits2.addCssRules(cssRules[2], $("#spruits-app-styles"));

//****************************************************************************************************************************************************************************
screens[pageName] = createDocPage(pageName, [
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<p>").html("Components produce HTML and CSS which browser uses to render the UI. They may contain other components and also html elements which are not components. " +
		    "Every component has the <code>$field</code>-property which is a jquery object and can be inserted to the DOM."),
      $("<div>").html("Create an empty component:"),
      $("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text("comp = new Component({});") )
    ),
    $("<p>").append(
      $("<div>").append('It produces the following html:'),
      $("<code>").append( $("<pre>").text("  " + (comps["1"].$field.prop("outerHTML").replace("<label>","\n    <label>").replace("</label>", "</label>\n  "))) )
    ),
    $("<p>").append(
      $("<p>").html(
	"The argument object has some useful predefined properties. The most used one is <code>fieldName</code>. The name is inserted to the component's label-tag. Here is the code for the traditional Hello World."
      ),
      $("<code>").append(
	$("<pre>").text(comps["1.hw"].toString().replace(/\(\) => {/, "").replace("\n","").replace(/}$/, ""))
      ),
      $("<p>", { style:"font-size:0.8em;" }).append( $("<a>", { href:"javascript:;", style:"color:#999900" }).html("Full Source").on("click", e => {
	handleClickFullSource(e, [
	  comps["1.hw"].toString().replace(/\(\) => {/, "").replace("\n","").replace(/}$/, ""),
	], "Hello World");
      }))
    ),
    $("<p>").append(
      $("<p>").append(
	"Another much used property of the argument object is called ", $("<code>").html("attrs"),
	". It delivers the required CSS to the component. Styles can be inline or in classes. If Hello World-application is enhanced with text color and fatness it looks like",
	$("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text('attrs:{ label:{ style:"color:red;font-weight:bold;" } }')), "Or",
	$("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text('attrs:{ label:{ class:"hw-label" } }'))
      ),
      $("<p>").append(
	'In the latter case, a code for the class is needed. This is done by an utility function <code>addCssRule</code>. It populates the rule of the class to the application styles.'
      ),
      $("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text('spruits2.addCssRule(".spruit-field .hw-label:{ color:red;font-weight:bold; }");') )
    )
  ),
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<div>").append(
	"Component can be extended by inserting html elements to the <code>$field</code>. For example, it may be needed to know if user is Male, Female or Other. In this case, the page needs a field which may ",
	"be called Gender. The field name is inserted to the component's label-tag. Html elements of the radio buttons are appended to the <code>$field</code>. ",
	"The names of the buttons are decorated with indent and their length is set to justify the button positions."
      ),
      $("<code>").append(
	$("<pre>").css({ "padding-left":"1em" }).text(comps["5.code"].toString()) // .replace(/\(\) => {/, "").replace("\n","").replace(/}$/, ""))
      )
    ),
    $("<p>").append(
      $("<div>", { style:"margin-bottom:0.5em" }).html("Here is the component in the action:"),
      (new comps["5.code"]()).$field.css({ display:"block", "padding-left":"1em" })
      /*
      $("<button>").html("val").on("click", e => handleClickVal(e, "5")), // XXX
      $("<span>", { style:"margin-left:1em" })
      */
    ),
    $("<p>", { style:"font-size:0.8em;" }).append( $("<a>", { href:"javascript:;", style:"color:#999900" }).html("Full Source").on("click", e => {
      handleClickFullSource(e, [
	comps["5.code"].toString(),
	'$("body").append((new Gender()).$field)', ' ',
      ], (new comps["5.code"]()).name);
    }))
  ),
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<div>").html(
	"There are other use cases of the radio button groups. The above functionality can be generalized to a new component type called RadioGroup."
      ),
      $("<p>", { class:"usage", style:"margin-left:1em"}).append(
 	 '<code>' + 'new spruits2.' + RadioGroupImplementation[0].usage.name + '(' + JSON.stringify(RadioGroupImplementation[0].usage.args) + ')' + '</code>'
      ),
      $("<div>").html(
	"Argument object gets a new property called <code>buttonNames</code>. It is an array which replaces the hard coded array in Gender. Radio button is refactored so that it is also a component which extends Component."
      ),
      $("<code>", { class:"impl" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text('spruits2.wc(' + RadioGroupImplementation[0].f.toString() + ')')
      ),
      $("<div>").html(
	"Now the button's $field tag is <code>&lt;span&gt;</code>. In order to keep the buttons " +
	"on separate lines and get the indent decoration, styles are set via CSS class <code>radiobutton</code>."
      ),
      $("<code>", { class:"cssrules" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text('spruits2.addCssRule(`' + cssRules[0] + '`);')
      )
    ),
    $("<p>").append(
      $("<div>").html("Here is the new RadioGroup-component in the action:"),
      radioGroups[0].$field.css({ display:"block", "padding-left":"1em" }) // comps["6"].$field.css({ "padding-left":"1em" }),
      //$("<button>").html("val").on("click", e => handleClickVal(e, "6")), // XXX
      //$("<span>", { style:"margin-left:1em" })
      //$("<div>").append(JSON.stringify(comps["6"]))
    ),
    $("<p>", { style:"font-size:0.8em;" }).append( $("<a>", { href:"javascript:;", style:"color:#999900" }).html("Full Source").on("click", e => {
      let $usage = $(e.target).parent().prev().prev().children(".usage").children("code"),
	  $impl = $(e.target).parent().prev().prev().children(".impl").children("pre"),
	  $cssrules = $(e.target).parent().prev().prev().children(".cssrules").children("pre");
      
      handleClickFullSource(e, [
	$impl.text(),
	$cssrules.text(),
	'$("body").append((' + $usage.text() + ').$field);'
      ], RadioGroupImplementation[0].usage.args.fieldName);
    }))
  ),
  $("<div>", { class:"field-row dotted last" }).append(
    $("<p>").append(
      $("<div>").append(
	"There may be need to style the grey radio button according the brand's look and feel, for example. This is done so that the <code>&lt;input&gt;</code> is hidden and styleable <code>&lt;span&gt;</code> having class ",
	"<code>custombutton</code> is inserted next to the input. Checkmark to indicate if the radio button is checked, is done via CSS pseudo-class <code>after</code>."
      ),
      $("<code>", { class:"cssrules" }).append(
	$("<pre>").css({ "padding-left":"1em" }).append(cssRules[1])
      ),
      $("<div>").append(
	"Clicking of the custom button is handled by <code>handleClickCheckbox</code>. Developer may choose between the custom and browser's default button via <code>args.custom</code>. In the latter case, hiding is cancelled by ",
	"<code>radiobutton.def</code>-class."
      ),
      $("<code>", { class:"impl" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text(RadioGroupImplementation[1].f.toString())
      )
    ),
    $("<p>").append(
      $("<div>").html("Here is the customized RadioGroup-component in the action:"),
      radioGroups[1].$field.css({ display:"block", "padding-left":"1em" }) // comps["6"].$field.css({ "padding-left":"1em" }),
    ),
    $("<p>", { style:"font-size:0.8em;" }).append( $("<a>", { href:"javascript:;", style:"color:#999900" }).html("Full Source").on("click", e => {
      let $usage = $("<code>").text('new spruits2.' + RadioGroupImplementation[1].usage.name + '(' + JSON.stringify(RadioGroupImplementation[1].usage.args) + ')'),
	  $impl = $(e.target).parent().prev().prev().children(".impl").children("pre"),
	  $cssrules = $(e.target).parent().prev().prev().children(".cssrules").children("pre");
      
      handleClickFullSource(e, [
	"spruits2.wc(" + $impl.text() + ");",
	"spruits2.addCssRule(`" + $cssrules.text() + "`);",
	'$("body").append((' + $usage.text() + ').$field);'
      ], RadioGroupImplementation[1].usage.args.fieldName);
    }))
  )
  /*
    ,
  $("<div>", { class:"field-row dotted last" }).append(
    $("<p>").append(
      $("<div>").html("The default tag of the field is &lt;span&gt;. It can be replaced by another tag:"),
      $("<code>").append( $("<pre>").text('  comp = new Component({ $field:$("<div>") });\n') )
    ),
    $("<p>").append(
      $("<div>").html("The component produces the following html:"),
      $("<code>").append( $("<pre>").text("  " + (comps["3"].$field.prop("outerHTML").replace("<label>","\n    <label>").replace("</label>", "</label>\n  "))) )
    ),
    $("<p>").append(
      $("<div>").html("Or it can be replaced by a string:"),
      $("<code>").append( $("<pre>").text('  comp = new Component({ $field:"Hello World!!!" });\n') )
    ),
    $("<p>").append(
      $("<div>").html("The component produces the following html:"),
      $("<code>").append( $("<pre>").text("  " + comps["2"].$field) )
    ),
    $("<p>").append(
      $("<div>").html("If the field-tag is empty or it does not exist the component does not contain a label:"),
      $("<code>").append( $("<pre>").text('  comp = new Component({ $field:$("<input>", { type:"radio" }) });\n') )
    ),
    $("<p>").append(
      $("<div>").html("The component produces the following html:"),
      $("<code>").append( $("<pre>").text("  " + comps["2.$input"].$field.prop("outerHTML")) )
    )
  ),
   */
]);

//****************************************************************************************************************************************************************************
let pairs = [], Card, PairsImplementation = [], pairCssRules = [], cardCssRules;

Card = function Card(args) {
  let faceValue = args.faceValue,
      onClick =   args.onClick,
      $label;
  
  spruits2.Component.call(this, args);
  $label = this.$label;
  $label.html(faceValue);
  this.$field.addClass("card");
  this.$field.on("click", e => onClick(e, $label));
};

cardCssRules = `.spruit-field.card > label {
  width: 3em;
  height: 2.5em;
  padding-top:0.5em;
  text-align: center;
  border: 0;
  margin: 0.5em;
  border-radius: 8px;
  background: #ffff00;
  border-right: 1px solid #999900;
  border-bottom: 1px solid #999900;
  color: #333300;
}
.spruit-field.card > label.facedown {
  background: #999900;
  color: #999900;
  border-right-color: #ffff00;
  border-bottom-color: #ffff00;
}
.spruit-field.card > label.removed {
  background: #9ACD32;
  color: #9ACD32;
  border-right-color: #9ACD32;
  border-bottom-color: #9ACD32;
}`;
spruits2.addCssRule(cardCssRules);

//****************************************************************************************************************************************************************************
PairsImplementation[0] = {};
PairsImplementation[0].f = function FindPairs(args) {
  let pairList = [ "a", "b", "c", "d" ],
      $board = $("<div>"),
      
      shuffleCards = function() {
	/* very bad shuffler */
	return [ "a1", "a2", "b1", "b2", "c1", "c2", "d1", "d2" ];
      },

      playGame = function(e, $label) {
	/* Turn cards, check pairs and manage game. */
      };

  spruits2.Component.call(this, args);
  spruits2.Container.call(this, this.name);

  /* Create pairs and store them to fields-property. Card-component has not been implemented yet. */
  pairList.forEach(card => {
    this.createField(card + "1", Card, { faceValue:card, attrs:{ label:{ class:"facedown" }}, onClick:playGame });
    this.createField(card + "2", Card, { faceValue:card, attrs:{ label:{ class:"facedown" }}, onClick:playGame });
  });

  /* shuffleCards returns an array which contains the fieldNames of the cards in random order. 
   * Cards are placed to the board in that order by the Array.map-method.
   */
  $board.append( shuffleCards().map(cardName => this.fields[cardName].$field) );
  this.$field.append($board);
};
PairsImplementation[0].usage = { name:"FindPairs", args:{
  fieldName:"FindPairs, v0.1",
}};
pairCssRules[0] = "";
pairs.push(new PairsImplementation[0].f(PairsImplementation[0].usage.args));
//spruits2.addCssRule(pairCssRules[0]);

//****************************************************************************************************************************************************************************
PairsImplementation[1] = {};
PairsImplementation[1].f = function(args) {
  let pairList = [ "a", "b", "c", "d" ],
      $board = $("<div>", { class:"board" }),
      faceUp = [],
      
      shuffleCards = function(numPairs) {
	/* very bad shuffler */
	return [ "a1", "a2", "b1", "b2", "c1", "c2", "d1", "d2" ];
      },

      playGame = function playGame(e, $label) {
	let turned = false;
	
	e.preventDefault();
	
	if (faceUp.length < 2 && $label.hasClass("facedown")) {
	  $label.removeClass("facedown");
	  faceUp.push($label);
	  turned = true;
	}
	
	if (faceUp.length > 1) {
	  /* two cards are face-up */
	  
	  if (faceUp[0].html() === faceUp[1].html()) {
	    /* pair found */
	    faceUp.forEach($label => $label.addClass("removed"));
	    faceUp = [];
	  } else {
	    /* not a pair */
	    
	    if (turned === false) {
	      /* return cards back to the face-down state */
	      faceUp.forEach($label => $label.addClass("facedown"));
	      faceUp = [];
	    }
	  }
	}
      };
  
  spruits2.Component.call(this, args);
  spruits2.Container.call(this, this.name);

  /* Create pairs and store them to fields-property. */
  pairList.forEach(card => {
    this.createField(card + "1", Card, { faceValue:card, pairId:"1", attrs:{ label:{ class:"facedown" }}, onClick:playGame });
    this.createField(card + "2", Card, { faceValue:card, pairId:"2", attrs:{ label:{ class:"facedown" }}, onClick:playGame });
  });

  /* shuffleCards returns an array which contains the fieldNames of the cards a1, a2, ..., d1, d2. 
   * Cards are placed to the board in that order by the Array.map-method.
   */
  $board.append( shuffleCards(pairList.length).map(cardName => this.fields[cardName].$field) );
  this.$field.addClass("findpairs").append($board);

  this.playGame = playGame; // XXX this for documentary purpose only
};
pairCssRules[1] = `.spruit-field.findpairs .board {
  background-color: #9ACD32;
  margin: 1em;
}`;
pairs.push(new PairsImplementation[1].f({ fieldName:"Find Pairs, v0.2" }));
spruits2.addCssRule(pairCssRules[1]);

//****************************************************************************************************************************************************************************
PairsImplementation[2] = {};
PairsImplementation[2].f = function(args) {
  let pairList = [ "a", "b", "c", "d" ],
      $board = $("<div>", { class:"board" }),
      faceUp = [],
      
      shuffleCards = function(numPairs) {
	let cardId = [ 1, 2 ],
	    alreadySet = {},
	    boardSize = 2*numPairs,
	    board = Array(boardSize).fill(null),
	    i;
	
	pairList.forEach(pairName => {
	  cardId.forEach(id => {
	    for (;;) {
	      i = Math.floor(Math.random() * boardSize); // i = integer [0 - (boardSize-1)]
	      if (alreadySet["" + i] !== true) {
		alreadySet["" + i] = true;
		board[i] = pairName + id;
		break;
	      }
	    } // for(;;)
	  });
	});
	
	return board;
      },

      playGame = function(e, $label) {
	let turned = false;
	
	e.preventDefault();
	
	if (faceUp.length < 2 && $label.hasClass("facedown")) {
	  $label.removeClass("facedown");
	  faceUp.push($label);
	  turned = true;
	}
	
	if (faceUp.length > 1) {
	  /* two cards are face-up */
	  
	  if (faceUp[0].html() === faceUp[1].html()) {
	    /* pair found */
	    faceUp.forEach($label => $label.addClass("removed"));
	    faceUp = [];
	  } else {
	    /* not a pair */
	    
	    if (turned === false) {
	      /* return cards back to the face-down state */
	      faceUp.forEach($label => $label.addClass("facedown"));
	      faceUp = [];
	    }
	  }
	}
      };
  
  spruits2.Component.call(this, args);
  spruits2.Container.call(this, this.name);

  /* Create pairs and store them to fields-property. */
  pairList.forEach(card => {
    this.createField(card + "1", Card, { faceValue:card, pairId:"1", attrs:{ label:{ class:"facedown" }}, onClick:playGame });
    this.createField(card + "2", Card, { faceValue:card, pairId:"2", attrs:{ label:{ class:"facedown" }}, onClick:playGame });
  });

  /* shuffleCards returns an array which contains the fieldNames of the cards in random order. 
   * Cards are placed to the board in that order by the Array.map-method.
   */
  $board.append( shuffleCards(pairList.length).map(cardName => this.fields[cardName].$field) );
  this.$field.addClass("findpairs").append($board);
};
pairCssRules[2] = `.spruit-field.findpairs .board {
  background-color: #9ACD32;
  margin: 1em;
  padding:1em;
}`;
pairs.push(new PairsImplementation[2].f({ fieldName:"Find Pairs, v1.0" }));
spruits2.addCssRule(pairCssRules[2]);

//****************************************************************************************************************************************************************************
let shuffleCards = function shuffleCards(pairList, numPairs) {
  let cardId = [ 1, 2 ],
      alreadySet = {},
      boardSize = 2*numPairs,
      board = Array(boardSize).fill(null),
      i;
	
  pairList.forEach(pairName => {
    cardId.forEach(id => {
      for (;;) {
	i = Math.floor(Math.random() * boardSize); // i = integer [0 - (boardSize-1)]
	if (alreadySet["" + i] !== true) {
	  alreadySet["" + i] = true;
	  board[i] = pairName + id;
	  break;
	}
      } // for(;;)
    });
  });
	
  return board;
};
/*
function ShuffleArray(array) {
   var currentIndex = array.length;
   var temporaryValue, randomIndex;
   while (0 !== currentIndex) {
     // Pick a remaining element...
     randomIndex = Math.floor(Math.random() * currentIndex);
     currentIndex -= 1;
     // And swap it with the current element.
     temporaryValue = array[currentIndex];
     array[currentIndex] = array[randomIndex];
     array[randomIndex] = temporaryValue;
   }
}
*/

//****************************************************************************************************************************************************************************
pageName = "Container";
screens[pageName] = createDocPage(pageName, [
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<p>").html(`
  Application has many fields which are components. They are taken care by the capabilities of Container-component. Therefore, an application does not extend only Component but Container too. This way the application component gets a 
  new method called <code>createField</code> and a new property called <code>fields</code> which stores the created components. The property is object and a component is accessed by its fieldName.`),
      $("<p>").html(`
  Here a memory game called Find Pairs illustrates the usage of the Container-component. In the game, there are pairs of cards which the player tries to find. Shuffled cards are face down on the board and two cards are turned on each 
  round. If a pair was not found cards are returned back to the face-down state. When a pair is found, it is removed from the board. The game ends when all pairs have been found.
     `),
      $("<p>").html("Here is the skeleton of the app:"),
      $("<code>", { class:"impl" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text(PairsImplementation[0].f.toString())
      )
      /*
      $("<p>").append(
	$("<div>").html("Here is Find Pairs-game in the action:"),
	pairs[0].$field
      )
      */
    )
  ),
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<p>").html(`
  Card-component extends Component. It does not need additional components or elements. The component gets 4 arguments. Handling of the <code>fieldName</code> and <code>attrs.label</code> is done by Component but the other two
  are application spesific and they are handled by the code in Card-component.
  <ul style="list-style-type:none"> 
  <li><code style="width: 11em;display: inline-block;">fieldName</code>: the face value and pairId of the card. </li>
  <li><code style="width: 11em;display: inline-block;">faceValue</code>: this is seen in the card. </li>
  <li><code style="width: 11em;display: inline-block;">attrs.label.class</code>: a card is turned by toggling the label's facedown-class. This parameter sets the initial state to face-down.</li>
  <li><code style="width: 11em;display: inline-block;">onClick</code>: When a card is clicked, the game-logic is executed. The handler is provided by the game.</li>
  </ul>
     `),
      $("<p>").html(`
  Appearance of the Card is set by styling the component's label-tag. The first one configures the common and face-up attributes. The second one configures new color attributes of the face-down state. The third rule configures the
  disappearance of the card, when it is removed from the board.
     `),
      $("<code>", { class:"cssrules" }).append(
	$("<pre>").css({ "padding-left":"1em" }).append(cardCssRules)
      ),
      $("<p>").html(`
  The label contains fieldName by default. But in this component it is replaced by card's face-value. In order to separate Card's CSS rules from other spruit-field rules, card-class is added for the $field. Private property <code>
  $label</code> is needed because <code>this</code> in a click-handler points to the clicked html-element and not to the Card-object.
      `),
      $("<code>", { class:"impl" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text(Card.toString())
      ),
      $("<p>").append(
	$("<div>").html("Here is Card-component in the action. The click-handler is simpler than in Find Pairs game. This handler just turns the card."),
	(new Card({ fieldName:"x1", faceValue:"x", pairId:"1", attrs:{ label:{ class:"facedown" }}, onClick:function(e, $label){
	  e.preventDefault();
	  if ($label.hasClass("facedown")) $label.removeClass("facedown");
	  else $label.addClass("facedown");
	} })).$field
      )
    )
  ),
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(`
  Game-logic is implemented in <code>playGame</code>-method. It is executed, when the player clicks a card.`),
    $("<p>").append(`    
  In the initial state of the game, all cards are in the face-down state. So logically, the first task is to check if
  the clicked card should be changed to the face-up state. Only two cards can be in that state and the state of the card is changed only once. The state is changed by removing the facedown outlook which is created by Card's CSS-class 
  called <code>facedown</code>.`),
    $("<p>").append(`
  The game object has a private property called <code>faceUp</code> which stores the cards in
  the respective state. When this property contains two cards, it is time to check whether or not they form a pair. The pair is removed from the board by changing the color properties of the card via the Card's CSS-class called <code>
  removed</code>. So actually, the cards are still there but they can not be seen. In the "not a pair"-case cards are changed to the face-down state by changing the color properties via the <code>facedown</code>-class.
    `),
    $("<code>", { class:"impl" }).append(
      $("<pre>").css({ "padding-left":"0", "margin-left":"-2.5em" }).text("      " + pairs[1].playGame.toString())
    ),
    $("<p>").append(
      $("<div>").html("Here is the game with the very bad suffler. Finding pairs is trivial but the game-logic can be tested."),
      pairs[1].$field
    )
  ),
  $("<div>", { class:"field-row dotted last" }).append(
    $("<p>").append(`
  Cards' <code>fieldName</code> shuffler lottos a unique board index for each card. It gets the list of the pair names from the game. FieldName of the card contains a pair name and a card Id (1 or 2). <code>shuffleCards</code>-method 
  plays lotto for each pair and places pairName1 and pairName2 to the board-array. Lotto may suggest same index for more than one card but the shuffler notices this with the help of the <code>alreadySet</code>-object which contains the
  cards on the board already. In that situation, another index is drawn until a not-in-use index is gotten. The game gets the array and uses it as key-values to find card-components from the fields-property.
    `),
    $("<code>", { class:"impl" }).append(
      $("<pre>").css({ "padding-left":"1em" }).text(shuffleCards.toString())
    ),
    $("<p>").append(
      $("<div>").html("Here is Find Pairs-game in the action:"),
      pairs[2].$field
    )
  )
]);

//****************************************************************************************************************************************************************************
let Subscription = {
  create: function(entity) {    
    /* 1 */
    entity.createField("MSISDN", spruits2.DigitString, { size:"32", isKey:true });

    /* 2 */
    entity.createField("Balance", spruits2.DecimalDigitString, {});

    /* 3 */
    entity.createField("Service Provider ID", spruits2.DigitString, { size:"3" });

    /* 4 */
    entity.createField("Tariff Plan ID", spruits2.DigitString, { size:"10" });

    entity.addScreenLabel();
    entity.insertFields();
  } /* create */
}; // Subscription

//****************************************************************************************************************************************************************************
spruits2.wc(RadioGroupImplementation[2].f); // RadioGroup-1.0

PairsImplementation[3] = {};
PairsImplementation[3].f = function(args) {
  let States = { init:1, play:2, gameover:3 },
      state,
      pairList,
      faceUp = [],
      
      shuffleCards = function(numPairs) {
	let cardId = [ 1, 2 ],
	    alreadySet = {},
	    boardSize = 2*numPairs,
	    board = Array(boardSize).fill(null),
	    i;
	
	pairList.forEach(pairName => {
	  cardId.forEach(id => {
	    for (;;) {
	      i = Math.floor(Math.random() * boardSize); // i = integer [0 - (boardSize-1)]
	      if (alreadySet["" + i] !== true) {
		alreadySet["" + i] = true;
		board[i] = pairName + id;
		break;
	      }
	    } // for(;;)
	  });
	});
	
	return board;
      },

      playGame = function(e, $label) {
	let turned = false;
	
	e.preventDefault();
	
	if (faceUp.length < 2 && $label.hasClass("facedown")) {
	  $label.removeClass("facedown");
	  faceUp.push($label);
	  turned = true;
	}
	
	if (faceUp.length > 1) {
	  /* two cards are face-up */
	  
	  if (faceUp[0].html() === faceUp[1].html()) {
	    /* pair found */
	    faceUp.forEach($label => $label.addClass("removed"));
	    faceUp = [];
	    if (this.$field.children(".board").children(".card").children(".removed").length === (2 * pairList.length)) render(States.gameover);
	  } else {
	    /* not a pair */
	    
	    if (turned === false) {
	      /* return cards back to the face-down state */
	      faceUp.forEach($label => $label.addClass("facedown"));
	      faceUp = [];
	    }
	  }
	}
      }.bind(this),
      
      renderInit = function($board) {
        let numPairs = { "Easy":4, "Medium":6, "Hard":8 },
	    level = new spruits2.RadioGroup({ fieldName:"Select level", buttonNames:Object.keys(numPairs) }),
	    
	    handleClickStart = function(e) {
	      let val;
	      
	      e.preventDefault();
	
	      val = level.get("val");
	      if (numPairs[val]) {
		pairList = Array(numPairs[val]).fill(null).map((char,i) => String.fromCharCode("a".charCodeAt(0) + i));
		render(States.play);
	      }
	    };
	
	$board.append(level.$field, $("<button>").html("Play").on("click", handleClickStart));
      },

      renderPlay = function($board) {
	/* Create pairs and store them to fields-property. */
	pairList.forEach(pairName => {
	  ["1", "2"].forEach(cardId => {
	    this.createField(pairName + cardId, Card, { faceValue:pairName, attrs:{ label:{ class:"facedown" }}, onClick:playGame });
	  });
	});
	  
	/* shuffleCards returns an array which contains the fieldNames of the cards in random order. 
	 * Cards are placed to the board in that order by the Array.map-method.
	 */
	$board.append( shuffleCards(pairList.length).map(cardName => this.fields[cardName].$field) );
      }.bind(this),

      renderGameover = function($board) {
	let handleClickReplay = function(e, entity) {
	  e.preventDefault();
	  entity.fields = {};
	  render(States.init);
	};
	
	$board.append("Game over. ",  $("<button>").html("Replay").on("click", e => handleClickReplay(e, this)))
      }.bind(this),
      
      render = function(newState) {
	let $board = this.$field.children(".board");

	if ($board.length) $board.remove();
	$board = $("<div>", { class:"board" });
	this.$field.append($board);
	
	switch (newState) {
	case States.init:
	  renderInit($board);
	  break;
	  
	case States.play:
	  renderPlay($board);
	  break;

	case States.gameover:
	  renderGameover($board);
	  break;

	default:
	  $board.html("ERR:render:invalidState,this.name=" + this.name + ",newState=" + newState);
	  newState = state;
	  break;
	}
	state = newState;
      }.bind(this);

  
  spruits2.addCssRule(`.spruit-field.findpairs .board button {
    background: #ffff00;
    color: #333300;
  }`);
  spruits2.Entity.call(this, args);
  this.$field.addClass("findpairs");
  render(States.init);
};
pairs.push(new PairsImplementation[3].f({ fieldName:"Find Pairs, v1.1" }));

//****************************************************************************************************************************************************************************
pageName = "Entity";
screens[pageName] = createDocPage(pageName, [
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<p>").html(`
  Application may have so many components that they do not fit to the screen at the same time. Or the functionalities of the application are such that components work in sequence and are not needed at the same time. Logically related
  components are grouped into Entity-components which extend Component and Container.`),
      $("<p>").html(`
  Entities could be compared to records or tables in a database system. For example, a mobile billing software's UI application could have 
  Subscription and Service Provider entities. Subscription has components like MSISDN, Balance, Service Provider ID and Tariff Plan ID. Service Provider has components like Service Provider ID, Tariff Plan IDs and Terminating Billing 
  Enabled. Mobile phone operator would need to configure one million Subscriptions, one Service Provider and a few Tariff Plans among a few hundred other configurable options which are grouped into another Entities. Database system of
  the billing application would contain the related tables or views for each entity.
     `),
      $("<p>").html(`
  Entity gets its components in an argument called <code>screen</code>. It is an object, but it does not contain components as properties. Instead, it has a <code>create</code>-method which is called when the entity needs its 
  components. Screen-object is created by the application developer. Here this is made clearer via the Subscription-entity example. Screen contains the above mentioned components.
     `),
      $("<code>", { class:"impl" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text("screen = {\n  create:" + Subscription.create.toString() + "\n};")
      ),
      $("<p>").append(
	$("<div>").html("Here is refactored Find Pairs-game in the action:"),
	pairs[3].$field
      )
    ))
]);

//****************************************************************************************************************************************************************************
let SlideshowImplementation = [], slideshow=[], slideshowCss = [];
SlideshowImplementation[0] = {};
SlideshowImplementation[0].f = function Slideshow(args) {
  args.screens = {};
  args.menubar = [];
  args.dropdown = {};
  spruits2.PageManager.call(this, args);
};
slideshow[0] = new SlideshowImplementation[0].f({});

//****************************************************************************************************************************************************************************
SlideshowImplementation[1] = {};
SlideshowImplementation[1].f = function Slideshow(args) {
  let slideList = [ "Slide1", "Slide2", "Slide3" ];
  
  args.menubar = [ "File" ];
  args.dropdown = { "File":slideList.slice() };

  args.screens = {};
  slideList.forEach(slideName => {
    args.screens[slideName] = {
      create:function(entity) {
	entity.$field.append( $("<img>", { alt:slideName, src:slideName + ".JPG", width:"100%" }) );
      }
    };
  });

  args.attrs = { span:{ class:"spruit-field slideshow-0" }};
  spruits2.PageManager.call(this, args);
};

slideshowCss[1] = `.spruit-field.slideshow-0 {
  display: block;
  width: 80%;
  margin-left: 10%;
  background: #666600;
  position: relative;
  height:20em;
  margin-top:0.5em;
}
.spruit-field.slideshow-0 .page,
.spruit-field.slideshow-0 .homepage,
.spruit-field.slideshow-0 .pageboxes {
  position: absolute;
  overflow-y: hidden;
}`;
spruits2.addCssRule(slideshowCss[1]);

slideshow[1] = new SlideshowImplementation[1].f({ fieldName:"Slideshow", insertLabel:false });
slideshow[1].$field.children(".spruits-crud").addClass("hide");

//****************************************************************************************************************************************************************************
SlideshowImplementation[2] = {};
SlideshowImplementation[2].f = function Slideshow(args) {
  let
  slideList = [ "Slide1", "Slide2", "Slide3" ],
  
  Pager = function Pager(args) {
    args.screens = {};
    slideList.forEach(slideName => {
      args.screens[slideName] = { create:function(entity) {
	entity.$field.append( $("<img>", { alt:slideName, src:slideName + ".JPG", width:"100%" }) );
      } };
    });

    args.menubar = [ "File" ];

    args.dropdown = {};
    args.dropdown["File"] = slideList.slice();

    spruits2.PageManager.call(this, args);
    this.$field.addClass("slideshow hide");
    this.$field.children(".spruits-crud").addClass("hide");

    this.$field.find(".myhome").trigger("click");
    this.$field.find("#Slide1").trigger("click");
    this.$field.find("#Slide3").trigger("click");
    this.$field.find("#Slide2").trigger("click");
    this.$field.find(".myhome").trigger("click");
    
    $(window).on("resize", () => this.setHeight("height"));

    this.setHeight = function(propName, val, func) {
      let height, h;
      
      h = (this.$field.width() * 0.704) + "px";
      height = val ? val : h;
      this.$field.animate({ height: val ? val : h }, func);

      return height;
    };
  },

  showOn,
  
  handleTimeoutArrowLeft = function(counter) {
    pager.$field.find(".fa-arrow-circle-left").trigger("click");
    counter++;
    if (counter < slideList.length) setTimeout(handleTimeoutArrowLeft, 5000, counter);
    else showOn = false;
  },
  
  handleClickPlay = function handleClickPlay(e) {
    let h;
    
    e.preventDefault();
    pager.$field.removeClass("hide");
    h = pager.setHeight("animate", undefined, () => {

      if (showOn !== true) {
	pager.$field[0].scrollIntoView({behavior: "smooth"});
	setTimeout(handleTimeoutArrowLeft, 5000, 0);
	showOn = true;
      }
    });
  },
  
  handleClickPause = (e) => {
    e.preventDefault();
  },

  handleClickStop = (e) => {
    e.preventDefault();
    pager.setHeight("animate", "0px", () => {
      pager.$field.addClass("hide").css({ style:"" });
    });
  },
  
  pager = new Pager({ fieldName:"Slideshow", insertLabel:false });

  spruits2.Component.call(this, { fieldName:args.fieldName });
  this.$label.append($("<i>", { class:"fa fa-play" }).on("click", handleClickPlay).css({ "margin-left":"0.5em" }),
		     " ", $("<i>", { class:"fa fa-pause" }).on("click", handleClickPause),
		     " ", $("<i>", { class:"fa fa-stop" }).on("click", handleClickStop));
  this.$field.append(pager.$field).addClass("slideshow-app");
};
slideshow[2] = new SlideshowImplementation[2].f({ fieldName:"Trip to Stockholm" });

spruits2.addCssRule(`
.spruit-field.slideshow {
  display: block;
  width: 80%;
  margin-left: 10%;
  background: lightcyan;
  position: relative;
  margin-top:0.5em;
}
.spruit-field.slideshow .page,
.spruit-field.slideshow .homepage,
.spruit-field.slideshow .pageboxes {
  position: absolute;
  background: lightcyan;
  overflow-y: hidden;
}
.spruit-field.slideshow .pageboxes {
  padding:0;
}
.slideshow .spruit-screen > label {
  display: none;
}
.page.slideOut.hide,
.page.slideOutToLeft.hide {
  display: none;
}
.spruits-crud.hide.fadeIn {
  display: none;
}
.spruit-field.slideshow-app > label {
  width:16em;
}
.spruit-field.slideshow-app .fa-play, 
.spruit-field.slideshow-app .fa-pause, 
.spruit-field.slideshow-app .fa-stop {
  padding: 5px;
  border-top: 1px solid #bbbb00;
  border-right: 2px solid #bbbb00;
  border-bottom: 1px solid #bbbb00;
  border-radius: 4px;
  background: var(--backgroundColor);
  color: #999900;
  padding-left: 8px;
}
.spruit-field.slideshow.hide {
	display: none;
}`);

//****************************************************************************************************************************************************************************
pageName = "PageManager";
let prettyPrintNopageSlideshow = function(pmHtml) {
  pmHtml = pmHtml
    .replace('<label></label>',                                                                        '\n  <label></label>\n\n  ')
    .replace('><span class="spruit-field">',                                                           '>\n    <span class="spruit-field">\n      ')
    .replace('<ul class="spruits-menubar"></ul></span></div>',                                         '\n      <ul class="spruits-menubar"></ul></span></div>\n\n  ')
    .replace('<li class="navi-button"><i class="fa fa-home myhome"></i></li>',                         '\n    <li class="navi-button"><i class="fa fa-home myhome"></i></li>\n    ')
    .replace('<li class="navi-button"><i class="fa fa-arrow-circle-right arrow-swipe"></i></li></ul>', '\n    <li class="navi-button"><i class="fa fa-arrow-circle-right arrow-swipe"></i></li></ul>');
  return pmHtml.slice(0, pmHtml.indexOf('<span class="spruits-modal"')) + "</span>"; // remove crud, notification, calendar and timepicker
};
screens[pageName] = createDocPage(pageName, [
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<p>").html(`
  PageManager is a specialized container-component which extends Component only. It gets the content as components which are grouped into screens. Screens are type of Entity. Entity is packed to Page and handling of these gives the 
  manager its name. Page is an internal component of PageManager. Manager creates a page, when it is needed. Screen-entities are application specific and they are programmed by the application developers. In addition to creation, 
  PageManager provides means for navigation from a page to another. A whole application can be paged or it may contain a paged field. This document is an example of the paged application and this page shows how to create a paged field.
      `),
      $("<p>").html("Create an empty PageManager:"),
      $("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text('pm = new PageManager({ screens:{}, menubar:[], dropdown:{} });') ),
      $("<p>").append(
	$("<div>").append('It produces the following html:'),
	$("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text(prettyPrintNopageSlideshow(slideshow[0].$field.prop("outerHTML"))) )
      ),
      $("<p>").html(`
  Inside PageManager, there are Homepage and Pageboxes. And Bar (type of Menu) inside of Homepage. Initially Pageboxes contains only the home-button and page navigation buttons. It will get the boxes when pages are created. When the 
  home-button is clicked, Homepage fades in and the pages can be created. When done, home-button is clicked again. This triggers the slide in of the last created page. Note that even if the pages were created programmatically, the 
  home-button must be clicked because of the page animation mechanism. 
      `)
    )
  ),
  $("<div>", { class:"field-row dotted" }).append(
    $("<p>").append(
      $("<p>").html(`
  The example PageManager-field is called Slideshow. It will contain three images. First step is to create a menu which is able to trigger creation of the pages and entities which contain the slides.
      `),
      $("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text('menubar = [ "Slides" ];') ),
      $("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text('dropdown = { "Slides": [ "Slide1", "Slide2", "Slide3" ] };') ),
      $("<p>").html(`
  Next step is to create the screens of the entities. All screens contain one image. This is done for all slideNames in the Slides-dropdown. Note that only width is set for the images. Images' height will be scaled a:
      `),
      $("<code>").append( $("<pre>").css({ "padding-left":"1em" }).text(
	'screens[slideName] = {\n  create:function(entity) {\n    entity.$field.append( $("<img>", { alt:slideName, src:slideName + ".JPG", width:"100%" }) );\n  }\n};'
      )),
      $("<p>").html(`
  PageManager is styled to cover the whole screen by default. The field spesific CSS formulates the field and changes the positioning of Homepage, Pageboxes and pages to be relative to the field and not to the screen.
     `),
      $("<code>", { class:"cssrules" }).append(
	$("<pre>").css({ "padding-left":"1em" }).append(slideshowCss[1])
      ),
      $("<p>").html("Here is the skeleton of the field's implementation."),
      $("<code>", { class:"impl" }).append(
	$("<pre>").css({ "padding-left":"1em" }).text(SlideshowImplementation[1].f.toString())
      ),
      $("<p>").html("Here is the slideshow v0.1 in the action. Navigate to Homepage and create slides. Then manually walktrough the slideshow."),
      slideshow[1].$field
    )
  ),
  $("<div>", { class:"field-row dotted" }).append(
      $("<p>").html(`
  Application logic is added around PageManger. First the slides are created programmatically.
      `),
    $("<code>").append(
      $("<pre>").css({ "padding-left":"1em" }).text([
	'this.$field.find(".myhome").trigger("click");',
	'this.$field.find("#Slide1").trigger("click");',
	'this.$field.find("#Slide3").trigger("click");',
	'this.$field.find("#Slide2").trigger("click");',
	'this.$field.find(".myhome").trigger("click");']).map(line => { return line + "\n"; })
    ),
    $("<p>").html(`
  setHeight
      `),
      $("<p>").html(`
  Application refactoring.
      `),
      $("<p>").html(`
  Play,Pause,Stop - panel.
      `),
    slideshow[2].$field.css({ "padding-left":"1em" })
  )
]);

//****************************************************************************************************************************************************************************
pm = spruits2.init({ screens:screens, menubar:menubar, dropdown:dropdown });
pm.$field.addClass("spruitsdoc");
$("body").append(pm.$field);

$(".spruitsdoc").children(".homepage").children(":first")
  .removeClass("spruit-field")
  .addClass("spruit-screen")
  .children("label").html("Table of Contents");
$(".spruitsdoc").children(".homepage").children(":first").children(".spruits-menubar").addClass("hide");

// $(".spruitsdoc").children(".pageboxes").children(".myhome").trigger("click");
$("#Introduction").trigger("click");
$("#Screen JS".replace(/ /g, "")).trigger("click");
$("#Component".replace(/ /g, "")).trigger("click");
$("#Container".replace(/ /g, "")).trigger("click");
$("#Entity".replace(/ /g, "")).trigger("click");
$("#PageManager".replace(/ /g, "")).trigger("click");

// $(".spruitsdoc").children(".pageboxes").children(".myhome").trigger("click");
$(".spruitsdoc").children(".pageboxes").children(".navi-button").children(".fa-arrow-circle-right").trigger("click");

      /*
      switch (propName) {
      case "height":
	let w = this.$field.width();
	height = w * 0.704;
	this.$field.height(w * 0.704);
	break;
      case "animate":
	let h = (this.$field.width() * 0.704) + "px";
	height = val ? val : h;
	this.$field.animate({ height: val ? val : h }, func);
	break;
      }
      */


}); //document.ready
</script>
</head>
<body>
</body>
</html>
